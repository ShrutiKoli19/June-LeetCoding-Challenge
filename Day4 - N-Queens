class Solution {
public:
    vector<vector<string>> ans;
    
    bool isSafe(vector<string>& arr, int i, int j, int n){
        for(int row=0; row<=i; row++){
            if(arr[row][j]=='Q'){
                return false;
            }
        }
        
        int row = i; 
        int col = j;
        
        while(row>=0 && col>=0){
            if(arr[row][col]=='Q'){
                return false;
            }
             
            row--;
            col--;
        }
        
        row = i; 
        col = j;
        while(row>=0 && col<n){
            if(arr[row][col]=='Q'){
                return false;
            }
            
            row--;
            col++;
        }
        
        return true;
    }
    
    void nQueens(vector<string> &arr, int i, int n){
        if(i==n){
            ans.push_back(arr);
            return;
        }
        
        for(int col = 0; col<n; col++){
            if(isSafe(arr, i, col, n)){
                arr[i][col] = 'Q';
               
                nQueens(arr,i+1,n);
                
                arr[i][col] = '.';
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<string> arr;
        string s(n, '.');
        for(int i = 0; i<n; i++){
            arr.push_back(s);
        }
        
        nQueens(arr,0,n);
        
        return ans;
    }
};

